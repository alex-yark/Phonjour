{
  "name": "sequelize-fixtures",
  "version": "0.4.0",
  "description": "sequelize fixture loader",
  "main": "index.js",
  "scripts": {
    "test": "mocha tests"
  },
  "engines": {
    "node": "*"
  },
  "keywords": [
    "sequelize",
    "fixtures"
  ],
  "dependencies": {
    "bluebird": "^2.4.2",
    "glob": "~3.2.1",
    "js-yaml": "~2.1.0"
  },
  "devDependencies": {
    "sequelize": "*",
    "sqlite3": "*",
    "mocha": "*",
    "should": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/domasx2/sequelize-fixtures.git"
  },
  "bugs": {
    "url": "https://github.com/domasx2/sequelize-fixtures/issues"
  },
  "author": {
    "name": "Domas Lapinskas",
    "email": "domasx2@gmail.com"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "Sequelize fixtures\n==========================================\n\nThis is a simple lib to load data to database using sequelize.  \nIt is intended for easily setting up test data.  \nYaml and json formats are supported. Includes a grunt task.  \nDuplicate records are not insertd.\nAPI returns bluebird promises, but callbacks can also be used as the last argument.\n\n### Install\n    \n    npm install sequelize-fixtures\n\n### Test\n    \n    npm test\n\n### Usage\n\n```javascript\n    var sequelize_fixtures = require('sequelize-fixtures'),\n        models = {\n            Foo: require('./models/Foo')\n        };\n\n    //from file\n    sequelize_fixtures.loadFile('fixtures/test_data.json', models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //can use glob syntax to select multiple files\n    sequelize_fixtures.loadFile('fixtures/*.json', models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //array of files\n    sequelize_fixtures.loadFiles(['fixtures/users.json', 'fixtures/data*.json'], models).then(function(){\n        doStuffAfterLoad();\n    });\n\n    //specify file encoding (default utf8)\n    sequelize_fixtures.loadFile('fixtures/*.json', models, { encoding: 'windows-1257'}).then(function(){\n        doStuffAfterLoad();\n    });\n    \n    //apply transform for each model being loaded\n    sequelize_fixtures.loadFile('fixtures/*.json', models, {\n        transformFixtureDataFn: function (data) {\n          if(data.createdAt \n           && data.createdAt < 0) { \n            data.createdAt = new Date((new Date()).getTime() + parseFloat(data.createdAt) * 1000 * 60);\n          }\n          return data;\n        }\n    }).then(function() {\n        doStuffAfterLoad();\n    });\n\n    //from array\n    var fixtures = [\n        {\n            model: 'Foo',\n            data: {\n                propA: 'bar',\n                propB: 1\n            }\n        },\n        {\n            model: 'Foo',\n            data: {\n                propA: 'baz',\n                propB: 3\n            }\n        }\n    ];\n    sequelize_fixtures.loadFixtures(fixtures, models).then(function(){\n        doStuffAfterLoad();\n    });\n```\n\n### File formats\n\n#### json\n\n```json\n    [\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"bar\",\n                \"propB\": 1\n            }\n        },\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"baz\",\n                \"propB\": 3\n            }\n        }\n    ]\n```\n\n#### yaml\n\n```yaml\n    fixtures:\n        - model: Foo\n          data:\n            propA: bar\n            propB: 1\n        - model: Foo\n          data:\n            propA: baz\n            propB: 3\n```\n\n\n#### javascript\n\n```javascript\n    module.exports = [\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"bar\",\n                \"propB\": 1\n            }\n        },\n        {\n            \"model\": \"Foo\",\n            \"data\": {\n                \"propA\": \"baz\",\n                \"propB\": 3\n            }\n        }\n    ];\n```\n\n\n### Associations \n\nYou can specify associations by providing related object id or a where clause to select associated object with. Make sure associated objects are described before associations!\n\n#### belongsTo\n\nAssuming `Car.belongsTo(Owner)`:\n\n\n```json\n[\n    {\n        \"model\": \"Owner\",\n        \"data\": {\n            \"id\": 11,\n            \"name\": \"John Doe\",\n            \"city\": \"Vilnius\"\n        }\n    },\n    {\n        \"model\": \"Car\",\n        \"data\": {\n            \"id\": 203,\n            \"make\": \"Ford\",\n            \"owner\": 11\n        }\n    }\n]\n```\n\nOR \n\n```json\n[\n    {\n        \"model\": \"Owner\",\n        \"data\": {\n            \"name\": \"John Doe\",\n            \"city\": \"Vilnius\"\n        }\n    },\n    {\n        \"model\": \"Car\",\n        \"data\": {\n            \"make\": \"Ford\",\n            \"owner\": { //make sure it's unique across all owners\n                \"name\": \"John Doe\" \n            }\n        }\n    }\n]\n```\n\n#### hasMany, belongsToMany\n\nAssuming \n\n```javascript\nProject.hasMany(Person);\nPerson.hasMany(Project);\n```\n\nor\n\n```javascript\nProject.belongsToMany(Person);\nPerson.belongsToMany(Project);\n```\n\n```json\n[\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"id\":122,\n            \"name\": \"Jack\",\n            \"role\": \"Developer\"\n        }\n    },\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"id\": 123,\n            \"name\": \"John\",\n            \"role\": \"Analyst\"\n        }\n    },\n    {\n        \"model\":\"Project\",\n        \"data\": {\n            \"id\": 20,\n            \"name\": \"The Great Project\",\n            \"peopleprojects\": [122, 123]\n        }\n    }\n\n]\n```\n\nOR\n\n\n```json\n[\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"name\": \"Jack\",\n            \"role\": \"Developer\"\n        }\n    },\n    {\n        \"model\":\"Person\",\n        \"data\":{\n            \"name\": \"John\",\n            \"role\": \"Analyst\"\n        }\n    },\n    {\n        \"model\":\"Project\",\n        \"data\": {\n            \"name\": \"The Great Project\",\n            \"peopleprojects\": [\n                {                        \n                    \"name\": \"Jack\"\n                },\n                {\n                    \"name\": \"John\"\n                }\n            ]\n        }\n    }\n\n]\n```\n\n# Build options, save optons\n\nFor each model you can provide build options that are passed to Model.build() and save options that are passed to instance.save(), example:\n\n```json\n{\n    \"model\": \"Article\",\n    \"buildOptions\": { \n        \"raw\": true, \n        \"isNewRecord\": true\n    },\n    \"saveOptions\": { \n        \"fields\": [\"title\", \"body\"] \n    },\n    \"data\": {\n        \"title\": \"Any title\",\n        \"slug\": \"My Invalid Slug\"\n    }\n}\n\n```\n\n\n\n# grunt task\n\nGruntfile.js:\n\n```javascript\n    grunt.initConfig({\n        fixtures: {\n            import_test_data: {\n                src: ['fixtures/data1.json', 'fixtures/models*.json'],\n                models: function () {  //returns mapping model name: model\n                    return require('../models') \n                },\n                options: { //specify encoding, optiona. default utf-8\n                    encoding: 'windows-1257'\n                }\n            }\n        }\n\n    });\n\n    grunt.loadNpmTasks('sequelize-fixtures');\n```",
  "homepage": "https://github.com/domasx2/sequelize-fixtures",
  "_id": "sequelize-fixtures@0.4.0",
  "dist": {
    "shasum": "3be7ab0e2acfd78ded26101a2ffe8527b26687a9"
  },
  "_from": "sequelize-fixtures@",
  "_resolved": "https://registry.npmjs.org/sequelize-fixtures/-/sequelize-fixtures-0.4.0.tgz"
}
